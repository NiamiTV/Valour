@using Valour.Shared
@inject HttpClient Http
@inject NavigationManager navManager
@using Microsoft.AspNetCore.SignalR.Client;

<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <link href="https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap" rel="stylesheet">
        <body>
            <div class="mainrow">
                <div class="sidebar" id="sidebar1">
                    <img class="valour-logo" src="https://cdn.discordapp.com/attachments/723728766076977164/768967236806246420/USE_THIS_ONE_Logo.png">
                    <p class="valour-name">
                        Valour
                    </p>
                    <p class="valour-version">
                        Valour Platform Version 0.0.1 Pre-Alpha
                    </p>
                    <RoleComponent Name="Emperor"></RoleComponent>
                    <UserComponent Only="true" Username="SpikeViper" Role_color="rgb(0, 250, 255);" State="In General" pfp_url="https://cdn.discordapp.com/avatars/148554809392234497/f9f221695ebe707c9707ecf122440134.png?size=128"></UserComponent>
                    <RoleComponent Name="Prime Minister"></RoleComponent>
                    <UserComponent Only="true" Username="Pope Francis" Role_color="rgba(0, 255, 250, 1);" State="In General" pfp_url="https://cdn.discordapp.com/avatars/153555060926840833/240f5eb647299279607c78fa9fb1f835.png?size=128"></UserComponent>
                    <RoleComponent Name="VoopAI"></RoleComponent>
                    <UserComponent Only="true" Bot="true" Username="VoopAI" Role_color="rgb(255, 0, 233);" State="Moderating" pfp_url="https://cdn.discordapp.com/avatars/601282518989275177/6b8b49aeae7e5a6c606fb5ebfbaa99d3.png?size=512"></UserComponent>
                    <RoleComponent Name="Admin"></RoleComponent>
                    <UserComponent First="true" Username="xbomber125" Role_color="rgb(0, 192, 192);" State="In General" pfp_url="https://cdn.discordapp.com/avatars/212725867757961216/6d2f3798290d41fc2022e0abe2c4dbdc.png?size=128"></UserComponent>
                    <UserComponent Username="Silly" Role_color="rgb(0, 192, 192);" State="In another server" pfp_url="https://cdn.discordapp.com/avatars/203353033814310912/aad3215a0acdad45294a119d055e33b1.png?size=128"></UserComponent>
                    <UserComponent Username="Jam" Role_color="rgb(0, 192, 192);" State="In Off Topic" pfp_url="https://cdn.discordapp.com/avatars/474709845895806976/0906d3e1cdacc24ad26b530cca2730b6.png?size=128"></UserComponent>
                    <UserComponent Last="true" Username="Tyco" Role_color="rgb(0, 192, 192);" State="In General" pfp_url="https://cdn.discordapp.com/avatars/339896226122301440/e635b741ba65cdce0a6de10523002852.png?size=128"></UserComponent>
                </div>
                <div class="sidebar-2" id="sidebar2">
                    <CurrentChannelComponent Name="General" Description="General chat for legitimate conversations"></CurrentChannelComponent>
                    <div class="top-bar">
                    </div>
                    <UserInfoComponent Username="Superjacobl" RoleColor="rgb(0, 255, 158)" PfpURL="https://cdn.discordapp.com/avatars/259004891148582914/161f6a28041310cf0075c95695cec0c7.png?size=512"></UserInfoComponent>
                    <CategoryComponent Name="Announcements" IsOpen="false"></CategoryComponent>
                    <CategoryComponent Name="General Discussion" IsOpen="true">
                        <ChannelComponent Last="false" Open="true" First="true" Name="General"></ChannelComponent>
                        <ChannelComponent Last="false" Open="false" First="false" Name="Off Topic"></ChannelComponent>
                        <ChannelComponent Last="false" Open="false" First="false" Name="Current Events"></ChannelComponent>
                        <ChannelComponent Last="false" Open="false" First="false" Name="Memes"></ChannelComponent>
                        <ChannelComponent Last="true" Open="false" First="false" Name="Spike's Code Corner"></ChannelComponent>
                    </CategoryComponent>
                </div>
                <div class="channel-and-topbar" id="mainwindow">
                    <div class="topbar">
                    </div>
                    <div class="topline">
                    </div>
                    <div class="window" id="window">

                        @if (messages != null)
                        {
                            foreach (ClientPlanetMessage msg in messages)
                            {
                                <MessageComponent Message="msg"></MessageComponent>
                            }
                        }


                        <input type="text" class="textbox" @bind-value="@currentInput" @bind-value:event="oninput"  @onkeypress="OnChatboxKeypress">
                    </div>
                </div>
            </div>
        </body>


    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code{

    /// <summary>
    /// True if the client has negotiated a channel connection
    /// </summary>
    private bool channelConnected;

    /// <summary>
    /// The input currently within the chatbox, this is bound and any changes will
    /// be reflected within the box.
    /// </summary>
    private string currentInput;

    /// <summary>
    /// Storage for messages that should be displayed
    /// </summary>
    private List<ClientPlanetMessage> messages;

    private HubConnection hubConnection;

    /// <summary>
    /// The current user
    /// </summary>
    private ClientPlanetUser user;

    /// <summary>
    /// The current channel id
    /// </summary>
    private ulong channel_id;

    /// <summary>
    /// The index of the last sent message
    /// </summary>
    private ulong messageIndex;

    // Runs when page is initialized
    protected override async Task OnInitializedAsync()
    {
        // TODO: Actually get channel id
        channel_id = 1;

        // TODO: Actually get the current user
        user = new ClientPlanetUser()
        {

            Username = "Test User",
            Id = 0,
            Pfp_Url = "https://SpookVooper.com/media/unity-256.png"
        };

        await ConnectSignalR();
        await RefreshMessages();

        
    }

    public async Task ConnectSignalR()
    {
        // Get url for
        string conUrl = navManager.BaseUri.TrimEnd('/') + "/messagehub";

        hubConnection = new HubConnectionBuilder()
            .WithUrl(conUrl)
            .Build();

        await hubConnection.StartAsync();

        // Connect to channel
        await hubConnection.SendAsync("JoinChannel", channel_id);

        hubConnection.On<string>("Relay", RecieveMessage);
    }

    public void RecieveMessage(string msg)
    {
        Console.WriteLine($"Recieved a message: {msg}");

        ClientPlanetMessage message = new ClientPlanetMessage()
        {
            Author = user,
            ChannelId = channel_id,
            Content = msg,
            TimeSent = DateTime.UtcNow
        };

        messages.Add(message);

        // Flag for UI refresh
        StateHasChanged();
    }

    public async Task RefreshMessages()
    {
        // Request messages from server
        messages = await Http.GetFromJsonAsync<List<ClientPlanetMessage>>($"Channel/GetMessages?channel_id={channel_id}");
    }

    /// <summary>
    /// This runs every time a key is pressed when the chatbox is selected
    /// </summary>
    public async Task OnChatboxKeypress(KeyboardEventArgs args)
    {
        // Debug for key presses
        // Console.WriteLine(currentInput);

        if (args.Key == "Enter")
        {
            // Grab current input
            string msg = currentInput;

            // Clear input
            currentInput = "";

            // Post message to server
            await PostMessage(msg);

            StateHasChanged();
        }
    }

    public async Task OnChatboxInput()
    {

    }

    public async Task PostMessage(string msg)
    {
        ClientPlanetMessage message = new ClientPlanetMessage()
        {
            ChannelId = channel_id,
            Content = msg,
            TimeSent = DateTime.UtcNow,
            Author = user
        };

        string json = Newtonsoft.Json.JsonConvert.SerializeObject(message);

        Console.WriteLine(json);

        HttpResponseMessage httpresponse = await Http.PostAsJsonAsync<ClientPlanetMessage>($"Channel/PostMessage", message);

        MessagePostResponse response =
            Newtonsoft.Json.JsonConvert.DeserializeObject<MessagePostResponse>(await httpresponse.Content.ReadAsStringAsync());

        if (!response.Success)
        {
            messages.Add(new ClientPlanetMessage()
            {
                TimeSent = DateTime.UtcNow,
                ChannelId = channel_id,
                Content = $"Failed to post message: {response.Response}",
                Index = 0
            });
        }

        Console.WriteLine(response.ToString());
    }
}